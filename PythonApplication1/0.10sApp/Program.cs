using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;
using System.Threading;
using IronPython.Hosting;


namespace _0._10sApp
{
    class mainLogic
    {
        string output = "";
        bool waitForCmd = false;

        public mainLogic()
        {

        }

        public void Start()
        {
            //Process pytonLigths = new Process();

            ProcessStartInfo start = new ProcessStartInfo();
            string cmd = @"C:\Users\Aganya.D\Desktop\GitT\0.10s\PythonApplication1\PythonApplication1\PythonApplication1.py";
            start.FileName = @"C:\Python27\python.exe";// + "\"" + cmd + "\"";
            //string cmd = @"C:\Users\Aganya.D\Desktop\GitT\0.10s\PythonApplication1\PythonApplication1\PythonApplication1.py";
            start.Arguments = string.Format("\"{0}\"", cmd);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = false; // We don't need new window
            start.RedirectStandardInput = true;
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            Process process = new Process();
            process.StartInfo = start;
            process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
            {
                // Prepend line numbers to each line of the output.
                if (!String.IsNullOrEmpty(e.Data))
                {
                    output += e.Data;
                }

                if (output.Contains("Enter Command"))
                {
                    Console.WriteLine("{Enter Command} recived--------****");
                    output = "";
                    waitForCmd = true;
                }
            });
            process.Start();
            Thread.Sleep(100);

            while (!waitForCmd) ;
            process.StandardInput.WriteLine("1,2,3,4;1,2,3,4;1,2,3,4;1,2,3,4;1,2,3,4");
            waitForCmd = false;
            while (!waitForCmd) ;

            while (true)
            {

            }

        }

        //private void readOutput(sender, e)
        //{

        //}

        private bool WaitForAnswer(Process process, String operationName, string expectedRes, int maxTimeout, out string response)
        {

            StringBuilder sb = new StringBuilder();

            StringBuilder sbErros = new StringBuilder();

            System.Diagnostics.Stopwatch Stopper = new Stopwatch();

            Stopper.Restart();

            bool success = false;

            while ((!success) && (!process.HasExited) && (Stopper.ElapsedMilliseconds < maxTimeout))
            {
                string data = process.StandardOutput.ReadLine();

                Console.WriteLine(data);

                sb.Append(data);

                if (data.ToUpper().Contains("ERROR"))
                    sbErros.Append(data);

                Console.WriteLine(">{0}", data);

                if (data.Contains(expectedRes))
                    success = true;

                Thread.Sleep(100);
            }

            Stopper.Stop();

            response = sb.ToString();

            Console.WriteLine(String.Format("{0} OUTPUT:{1}", operationName, response));

            if (!success)
            {
                if (Stopper.ElapsedMilliseconds > maxTimeout)
                    Console.WriteLine(String.Format("WaitForAnswer: {0} timed out! Timeout Set To: {1}mS", operationName, maxTimeout));

                if (process.HasExited)
                {
                    Console.WriteLine(String.Format("WaitForAnswer: The Process has terminated! Exit code: {0}", process.ExitCode));

                    if (process.ExitCode == 0)
                    {
                        success = true;
                    }

                    else
                    {
                        Console.WriteLine(String.Format("WaitForAnswer: StandardError:{0}", process.StandardError.ReadToEnd()));

                        Console.WriteLine(String.Format("WaitForAnswer: Errors from StdOut:{0}", sbErros.ToString()));

                        sbErros = new StringBuilder();
                    }
                }
            }

            else
            {
                Console.WriteLine(String.Format("WaitForAnswer: {0}, Success!", operationName, maxTimeout));
            }

            return success;
        }

    }
    class Program
    {
        //static void Main(string[] args)
        //{
        //    while (true)
        //    {
        //        mainLogic mainApp = new mainLogic();
        //        mainApp.Start();
        //    }
        //}


        private static int lineCount = 0;
        private static StringBuilder output = new StringBuilder();

        public static void Main()
        {
            Process process = new Process();
            string script = @"C:\AganyaDejen\PythonApplication1.py";
            process.StartInfo.FileName = @"C:\Python27\python.exe" + " \"" + script + "\"";

            //process.StartInfo.Arguments = "\"" + cmd + "\"";
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
            {
                // Prepend line numbers to each line of the output.
                if (!String.IsNullOrEmpty(e.Data))
                {
                    lineCount++;
                    output.Append("\n[" + lineCount + "]: " + e.Data);
                }
            });

            process.Start();

            // Asynchronously read the standard output of the spawned process. 
            // This raises OutputDataReceived events for each line of output.
            process.BeginOutputReadLine();
            Thread.Sleep(500);

            // Write the redirected output to this application's window.
            Console.WriteLine(output);

            Thread.Sleep(500);
            process.Close();

            Console.WriteLine("\n\nPress any key to exit.");
            Console.ReadLine();
        }

        //static void Main(string[] args)
        //{
        //    var engine = Python.CreateEngine();

        //    string script = @"C:\AganyaDejen\PythonApplication1.py";

        //    var source = engine.CreateScriptSourceFromFile(script);

        //    var errors = new MemoryStream();

        //    engine.Runtime.IO.SetErrorOutput(errors, Encoding.Default);

        //    var output = new MemoryStream();

        //    engine.Runtime.IO.SetOutput(output, Encoding.Default);

        //    var scop = engine.CreateScope();

        //    //source.Execute(scop);
        //    string str(byte[] x) => Encoding.Default.GetString(x);

        //    Console.WriteLine("ERRORS:");
        //    Console.WriteLine(str(errors.ToArray()));
        //    Console.WriteLine();
        //    Console.WriteLine("OUTPUT:");
        //    Console.WriteLine(str(output.ToArray()));


        //    Console.ReadLine();

        //}



    }
}


