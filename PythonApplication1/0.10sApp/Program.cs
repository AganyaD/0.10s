using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace _0._10sApp
{
    class mainLogic
    {
        public mainLogic()
        {

        }

        public void Start()
        {
            //Process pytonLigths = new Process();

            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\Aganya.D\Desktop\GitT\0.10s\pyton\test\dist\PythonApplication1\PythonApplication1.exe";
            start.Arguments = "";// string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardInput = true;
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            string read = "";
            using (Process process = Process.Start(start))
            {
                StreamReader reader = process.StandardOutput;
                StreamWriter writer = process.StandardInput;
                Console.WriteLine("start----------");
                string data = string.Empty;
                WaitForAnswer(process, "5555", "Enter Command...", 5000, out data);

                process.StandardInput.WriteLine("1,2,3,4;1,2,3,4;1,2,3,4;1,2,3,4;1,2,3,4");

                WaitForAnswer(process, "5555", "Enter Command...", 5000, out data);


            }


            while (true)
            {

            }

        }

        private bool WaitForAnswer(Process process, String operationName, string expectedRes, int maxTimeout, out string response)
        {

            StringBuilder sb = new StringBuilder();

            StringBuilder sbErros = new StringBuilder();

            System.Diagnostics.Stopwatch Stopper = new Stopwatch();

            Stopper.Restart();

            bool success = false;

            while ((!success) && (!process.HasExited) && (Stopper.ElapsedMilliseconds < maxTimeout))
            {
                string data = process.StandardOutput.ReadLine();

                Console.WriteLine(data);

                sb.Append(data);

                if (data.ToUpper().Contains("ERROR"))
                    sbErros.Append(data);

                Console.WriteLine(">{0}", data);

                if (data.Contains(expectedRes))
                    success = true;

                Thread.Sleep(100);
            }

            Stopper.Stop();

            response = sb.ToString();

            Console.WriteLine(String.Format("{0} OUTPUT:{1}", operationName, response));

            if (!success)
            {
                if (Stopper.ElapsedMilliseconds > maxTimeout)
                    Console.WriteLine(String.Format("WaitForAnswer: {0} timed out! Timeout Set To: {1}mS", operationName, maxTimeout));

                if (process.HasExited)
                {
                    Console.WriteLine(String.Format("WaitForAnswer: The Process has terminated! Exit code: {0}", process.ExitCode));

                    if (process.ExitCode == 0)
                    {
                        success = true;
                    }

                    else
                    {
                        Console.WriteLine(String.Format("WaitForAnswer: StandardError:{0}", process.StandardError.ReadToEnd()));

                        Console.WriteLine(String.Format("WaitForAnswer: Errors from StdOut:{0}", sbErros.ToString()));

                        sbErros = new StringBuilder();
                    }
                }
            }

            else
            {
                Console.WriteLine(String.Format("WaitForAnswer: {0}, Success!", operationName, maxTimeout));
            }

            return success;
        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                mainLogic mainApp = new mainLogic();
                mainApp.Start();
            }
        }
    }


}
